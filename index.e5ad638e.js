const t={engine:null,renderingContext:null};class e{constructor(t=0,e=0,i=0,n=0){this.x=t,this.y=e,this.width=i,this.height=n}get param(){return[this.x,this.y,this.width,this.height]}get isEmpty(){return 0===this.width||0===this.height}}e.prototype.toString=function(){return`{x: ${this.x}, y: ${this.y}, width: ${this.width}, height: ${this.height}}`},e.prototype._IN_DEVELOPMENT_canCollideWith=function(t){const e=t=>[t.x,t.y,t.x+t.width,t.y+t.height],[i,n,o,s]=e(this),[r,l,h,a]=e(t),d=(t,e)=>t>=i&&t<o&&e>=n&&e<s;return d(r,l)||d(r,a)||d(h,l)||d(h,a)};const i=(t,i,n,o)=>new e(t,i,n,o),n=()=>i(0,0,0,0);function o(t,e){const i=t.x===e.x&&t.y===e.y,n=t.width===e.width&&t.height===e.height;return i&&n}class s{constructor(e,i,n){t.engine=this,t.renderingContext=document.getElementById(i).getContext("2d"),this.RootEntityControllerClass=e,this.fps=n,this._addEventListeners()}shouldPause=!1;paused=!1}function r(t,e){const i=t=>{e(t),t.subEntities.forEach((t=>{i(t)}))};return i(t)}s.prototype.initialize=function(){this.rootEntityController=new this.RootEntityControllerClass,this.paused=!0,this.didGameOver=!1,this.fpsInterval=1e3/this.fps,this.then=Date.now(),function(t,e){const i=t=>{e(t),t.childEntityControllers.forEach((t=>{i(t)}))};i(t)}(this.rootEntityController,(t=>{t.loadEntity()})),this.rootEntityController.entity.draw()},s.prototype.pause=function(){console.info("[engine] paused"),this.shouldPause=!0},s.prototype.play=function(){this.didGameOver?this.reset():(console.info("[engine] started"),this.paused=!1,window.requestAnimationFrame((()=>this.loop())))},s.prototype.gameOver=function(){console.info("[engine] game over"),this.didGameOver=!0},s.prototype.reset=function(){console.assert(this.paused,"Engine should be paused first to rest"),console.info("[engine] reset"),this.initialize(),this.play()},s.prototype.loop=function(){this.paused||window.requestAnimationFrame((()=>this.loop()));const t=Date.now(),e=t-this.then;e>this.fpsInterval&&(this.then=t-e%this.fpsInterval,this._tick())},s.prototype.getWorldFrame=function(){const e=t.renderingContext.canvas;return i(0,0,e.width,e.height)},s.prototype._tick=function(){this.shouldPause&&(this.shouldPause=!1,this.paused=!0,this.rootEntityController.update()),t.renderingContext.clearRect(...this.getWorldFrame().param),this.rootEntityController.update(),this.rootEntityController.entity.draw(),this._detectCollisionAndForward()},s.prototype._addEventListeners=function(){document.addEventListener("keydown",(t=>{this._didKeyDown(t)}))},s.prototype._didKeyDown=function({key:t}){" "===t&&(this.paused?this.play():this.pause()),this.paused||this.rootEntityController.didKeyDown(t)},s.prototype.willAnyEntityCollideWith=function(t){return this._collidingEntitiesWithFrame(t).size>0},s.prototype._collidingEntitiesWithFrame=function(t){const e=new Set;return r(this.rootEntityController.entity,(i=>{i.collidable&&!i.frame.isEmpty&&o(t,i.frame)&&e.add(i)})),e},s.prototype._detectCollisionAndForward=function(){r(this.rootEntityController.entity,(t=>{if(t.collidable&&!t.frame.isEmpty){const e=this._collidingEntitiesWithFrame(t.frame);e.delete(t),e.forEach((e=>{console.info(`[collision] between ${t} and ${e}`),t.didCollideWith(e)}))}}))};const l={clear:"clear",black:"black",white:"white",yellow:"yellow",red:"red",grey:"grey",color:(t,e,i)=>`rgb(${t}, ${e}, ${i})`};class h{currentScore=0;highestScore=0}h.prototype.incrementCurrentScore=function(){this.currentScore+=1,this.updateHighestScore()},h.prototype.resetCurrentScore=function(){this.currentScore=0},h.prototype.updateHighestScore=function(){this.highestScore=Math.max(this.currentScore,this.highestScore)};const a=new h;class d{}d.prototype.initialize=function(){this.gameScoreEl=document.getElementById("game-dash-score"),this.gameHighScoreEl=document.getElementById("game-dash-highscore"),this.gameStatusEl={paused:document.getElementById("game-dash-status-paused"),gameOver:document.getElementById("game-dash-status-game-over")},this.gameInstructionsEl={startGame:document.getElementById("game-dash-instructions-start-game"),playGame:document.getElementById("game-dash-instructions-play-game")},document.getElementsByTagName("body")[0].style.backgroundColor=l.bgColor;Array.prototype.forEach.call(document.getElementsByClassName("font"),(t=>{t.style.color=l.fontColor}))},d.prototype.update=function(){this.gameScoreEl.innerHTML=a.currentScore,this.gameHighScoreEl.innerHTML=`hi ${a.highestScore}`,this.gameStatusEl.paused.hidden=!0,this.gameStatusEl.gameOver.hidden=!0,this.gameInstructionsEl.startGame.hidden=!0,this.gameInstructionsEl.playGame.hidden=!0,t.engine.didGameOver?(this.gameStatusEl.gameOver.hidden=!1,this.gameInstructionsEl.startGame.hidden=!1):t.engine.paused?(this.gameStatusEl.paused.hidden=!1,this.gameInstructionsEl.startGame.hidden=!1):this.gameInstructionsEl.playGame.hidden=!1};const c=new d;class p{collidable=!1;type="UNKNOWN_ENTITY_TYPE";subEntities=[];bgColor=l.clear;constructor(t=n()){this.frame=t}}p.prototype.toString=function(){return`[${this.type} ${this.frame}]`},p.prototype.draw=function(){this.frame.isEmpty||this.bgColor===l.clear||(t.renderingContext.fillStyle=this.bgColor,t.renderingContext.fillRect(...this.frame.param)),this.subEntities.forEach((t=>t.draw()))},p.prototype.didCollideWith=function(t){console.error("Collision detection should be overridden by subclass")};class u{entity=new p;childEntityControllers=[]}u.prototype.loadEntity=function(){},u.prototype.didKeyDown=function(t){console.error("Override this function in root entity controller")},u.prototype.update=function(){this.childEntityControllers.forEach((t=>t.update()))};class y extends p{collidable=!0;collisionCallback=null}y.prototype.didCollideWith=function(t){this.collisionCallback&&this.collisionCallback(t)};const E={left:"←",up:"↑",right:"→",down:"↓",none:"none"},g=(t,e)=>(t%e+e)%e,m=(t,e,i=1)=>(t/=i,e/=i,(Math.floor(Math.random()*(e-t+1))+t)*i);class f extends y{type="SNAKE_ENTITY_TYPE";bgColor=l.snakeColor;constructor(t,e){super(i(t,e,10,10))}}class w extends u{direction=E.none;powerUp=!1}w.prototype.loadEntity=function(){this.snakeEntities=[this._createSnakeEntity(0,0)],this.snakeHeadEntity=this.snakeEntities[0],this.entity.subEntities=this.snakeEntities},w.prototype.update=function(){if(this.direction===E.none)return;let e={};e[E.up]=[0,-10],e[E.left]=[-10,0],e[E.down]=[0,10],e[E.right]=[10,0];const i=t.engine.getWorldFrame(),[n,o]=e[this.direction],s=g(this.snakeHeadEntity.frame.x+n,i.width),r=g(this.snakeHeadEntity.frame.y+o,i.height);if(this.powerUp){const t=this._createSnakeEntity(s,r);this.snakeEntities.push(t),this.snakeHeadEntity=t,this.powerUp=!1}else{const t=this.snakeEntities.shift();t.frame.x=s,t.frame.y=r,this.snakeEntities.push(t),this.snakeHeadEntity=t}},w.prototype.didKeyDown=function(t){const e={w:()=>this.direction=this.direction===E.down?E.down:E.up,a:()=>this.direction=this.direction===E.right?E.right:E.left,s:()=>this.direction=this.direction===E.up?E.up:E.down,d:()=>this.direction=this.direction===E.left?E.left:E.right};t in e&&(e[t](),console.info(`[snake] direction changed to ${this.direction}`))},w.prototype._createSnakeEntity=function(t,e){const i=new f(t,e);return i.collisionCallback=t=>{this._snakeEntityDidCollide(t)},i},w.prototype._snakeEntityDidCollide=function(e){e.type===C?(this.powerUp=!0,a.incrementCurrentScore()):"SNAKE_ENTITY_TYPE"===e.type&&(t.engine.pause(),t.engine.gameOver(),a.resetCurrentScore())};const C="POWER_ENTITY_TYPE";class b extends y{type=C;bgColor=l.powerUpColor}class k extends u{shouldAddPower=!0}k.prototype.loadEntity=function(){this.powerEntity=new b,this.powerEntity.collisionCallback=t=>{this._powerEntityDidCollide(t)},this.entity.subEntities=[this.powerEntity]},k.prototype.update=function(){this.shouldAddPower&&(this._updatePowerEntityFrame(),this.shouldAddPower=!1)},k.prototype._updatePowerEntityFrame=function(){const e=t.engine.getWorldFrame();let n;do{n=i(m(0,e.width-10,10),m(0,e.height-10,10),10,10)}while(t.engine.willAnyEntityCollideWith(n));this.powerEntity.frame=n,console.info(`[power] added at ${n}`)},k.prototype._powerEntityDidCollide=function(t){"SNAKE_ENTITY_TYPE"===t.type&&(this.shouldAddPower=!0)};class S extends u{}S.prototype.loadEntity=function(){const e=t.engine.getWorldFrame();this.entity.frame.width=e.width,this.entity.frame.height=e.height,this.entity.bgColor=l.bgColor,this.powerEntityController=new k,this.childEntityControllers.push(this.powerEntityController),this.entity.subEntities.push(this.powerEntityController.entity),this.snakeEntityController=new w,this.childEntityControllers.push(this.snakeEntityController),this.entity.subEntities.push(this.snakeEntityController.entity)},S.prototype.didKeyDown=function(t){this.snakeEntityController.didKeyDown(t)},S.prototype.update=function(){t.engine.paused||(this.snakeEntityController.update(),this.powerEntityController.update()),c.update()};const _=new s(S,"game-root",10);l.bgColor="#2b0719",l.snakeColor="#f7f7f9",l.powerUpColor="#eacc81",l.fontColor="#f7f7f9",document.getElementsByTagName("body")[0].style.backgroundColor=l.bgColor,_.initialize(),c.initialize();
//# sourceMappingURL=index.e5ad638e.js.map
